# action.yml
name: Proxmox LaunchPad
description: Manage Proxmox Containers for your Repository.
author: maxklema
branding:
  icon: "package"
  color: "purple"

inputs:
  proxmox_username:
    required: true
  proxmox_password:
    required: true
  container_password:
    required: false
  public_key:
    required: false
  http_port:
    required: false
  project_root:
    required: false
  container_env_vars:
    required: false
  install_command:
    required: false
  build_command:
    required: false
  start_command:
    required: false
  runtime_language:
    required: false
  services:
    required: false
  custom_services:
    required: false
  linux_distribution:
    required: false
  multi_component:
    required: false
  root_start_command:
    required: false
  github_pat:
    required: false

runs:
  using: "composite"
  steps:
    - name: Check if action should run
      shell: bash
      id: should-run
      env:
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_EVENT_CREATED: ${{ github.event.created }}
      run: |
        if [[ "$GITHUB_EVENT_NAME" != "push" ]] || [[ "$GITHUB_EVENT_CREATED" == "false" ]]; then
          echo "should_run=true" >> $GITHUB_OUTPUT
        else
          echo "should_run=false" >> $GITHUB_OUTPUT
          echo "Skipping action: Push event with created=true"
        fi
    
    - name: Determine Target Branch Name
      shell: bash
      id: branch-name
      if: steps.should-run.outputs.should_run == 'true'
      env:
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_EVENT_REF: ${{ github.event.ref }}
      run: |
        if [[ "$GITHUB_EVENT_NAME" == "delete" ]]; then
          TARGET_BRANCH="$GITHUB_EVENT_REF"
          echo "Using deleted branch name: $TARGET_BRANCH"
        else
          TARGET_BRANCH="$GITHUB_REF_NAME"
          echo "Using current branch name: $TARGET_BRANCH"
        fi
        echo "target_branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
    
    - name: Create Runner (If Needed)
      shell: bash
      id: create-runner
      if: steps.should-run.outputs.should_run == 'true'
      env:
        GITHUB_REPOSITORY_FULL: ${{ github.repository }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        TARGET_BRANCH: ${{ steps.branch-name.outputs.target_branch }}
        CONTAINER_PASSWORD: ${{ inputs.container_password }}
        PROXMOX_USERNAME: ${{ inputs.proxmox_username }}
        PROXMOX_PASSWORD: ${{ inputs.proxmox_password }}
        GITHUB_PAT: ${{ inputs.github_pat }}
        GITHUB_API: ${{ github.api_url }}
        LINUX_DISTRIBUTION: ${{ inputs.linux_distribution }}
        PROJECT_REPOSITORY: ${{ github.server_url }}/${{ github.repository }}
        GITHUB_JOB: ${{ github.job }}
      run: |
        REPO_NAME=$(basename "$GITHUB_REPOSITORY_FULL")
        CONTAINER_NAME="${GITHUB_REPOSITORY_OWNER}-${REPO_NAME}-${TARGET_BRANCH}"
        CONTAINER_NAME=${CONTAINER_NAME,,}
        CONTAINER_NAME=$(echo "$CONTAINER_NAME" | sed 's/[^a-z0-9-]/-/g')
        export CONTAINER_NAME

        # Auto-detect if this is a runner setup job based on job name or if no container inputs are provided
        CREATE_RUNNER_JOB="N"
        if [[ "$GITHUB_JOB" == *"setup"* ]] || [[ "$GITHUB_JOB" == *"runner"* ]]; then
          CREATE_RUNNER_JOB="Y"
          echo "CREATE_RUNNER_JOB=true" >> $GITHUB_OUTPUT
        fi

        if [ ! -z "$GITHUB_PAT" ]; then
          RESPONSE=$(curl --location ${GITHUB_API}/repos/${GITHUB_REPOSITORY_OWNER}/${REPO_NAME}/actions/runners --header "Authorization: token $GITHUB_PAT")

          while read -r RUN; do
              RUNNER_NAME=$(echo "$RUN" | jq -r '.name')
              if [ "$RUNNER_NAME" == "$CONTAINER_NAME" ]; then
                if [ "${CREATE_RUNNER_JOB^^}" == "N" ]; then
                    exit 0 #Runner exists, continue to next steps
                else
                    echo "STOP_SCRIPT=true" >> $GITHUB_OUTPUT
                    exit 0 # Runner exists, continue to next job.
                fi
              fi
          done < <(echo "$RESPONSE" | jq -c '.runners[]')

          echo "Creating a Runner..."
          set +e
          sshpass -p 'mie123!' ssh \
            -T \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o SendEnv="CONTAINER_NAME CONTAINER_PASSWORD PROXMOX_USERNAME PROXMOX_PASSWORD GITHUB_PAT LINUX_DISTRIBUTION PROJECT_REPOSITORY" \
            setup-runner@opensource.mieweb.org

          EXIT_STATUS=$?

          # Exit if a container exists but an associated runner does not.
          if [ $EXIT_STATUS != 3 ]; then
            echo "Something went wrong with creating/using a runner."
            exit 1
          fi

          echo "STOP_SCRIPT=true" >> $GITHUB_OUTPUT
        fi

    - name: Container Creation for Branch (If Needed)
      id: create-lxc
      shell: bash
      if: ${{ (github.event_name == 'create' || github.event_name == 'push') && steps.should-run.outputs.should_run == 'true' }}
      env:
        GITHUB_EVENT: ${{ github.event_name }}
        GITHUB_REPOSITORY_FULL: ${{ github.repository }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        TARGET_BRANCH: ${{ steps.branch-name.outputs.target_branch }}
        CONTAINER_PASSWORD: ${{ inputs.container_password }}
        PROXMOX_USERNAME: ${{ inputs.proxmox_username }}
        PROXMOX_PASSWORD: ${{ inputs.proxmox_password }}
        PUBLIC_KEY: ${{ inputs.public_key }}
        HTTP_PORT: ${{ inputs.http_port }}
        DEPLOY_ON_START: ${{ inputs.deploy_on_start }}
        PROJECT_REPOSITORY: ${{ github.server_url }}/${{ github.repository }}
        PROJECT_BRANCH: ${{ steps.branch-name.outputs.target_branch }}
        PROJECT_ROOT: ${{ inputs.project_root }}
        REQUIRE_ENV_VARS: ${{ inputs.require_env_vars }}
        CONTAINER_ENV_VARS: ${{ inputs.container_env_vars }}
        INSTALL_COMMAND: ${{ inputs.install_command }}
        START_COMMAND: ${{ inputs.start_command }}
        BUILD_COMMAND: ${{ inputs.build_command }}
        RUNTIME_LANGUAGE: ${{ inputs.runtime_language }}
        REQUIRE_SERVICES: ${{ inputs.require_services }}
        SERVICES: ${{ inputs.services }}
        CUSTOM_SERVICES: ${{ inputs.custom_services }}
        LINUX_DISTRIBUTION: ${{ inputs.linux_distribution }}
        MULTI_COMPONENT: ${{ inputs.multi_component }}
        ROOT_START_COMMAND: ${{ inputs.root_start_command }}
        GITHUB_PAT: ${{ inputs.github_pat }}
        GH_ACTION: y
      run: |
        set +e
        REPO_NAME=$(basename "$GITHUB_REPOSITORY_FULL")
        CONTAINER_NAME="${GITHUB_REPOSITORY_OWNER}-${REPO_NAME}-${TARGET_BRANCH}"
        CONTAINER_NAME=${CONTAINER_NAME,,}
        CONTAINER_NAME=$(echo "$CONTAINER_NAME" | sed 's/[^a-z0-9-]/-/g')
        export CONTAINER_NAME
        STOP_SCRIPT=${{ steps.create-runner.outputs.STOP_SCRIPT }}
        if [ "$STOP_SCRIPT" != "true" ]; then
          set +e
          echo "Running Container Exists..."
          
          # Determine SSH target based on network location
          EXTERNAL_IP=$(dig +short opensource.mieweb.org)
          if [ "$EXTERNAL_IP" = "10.15.20.69" ]; then
            SSH_TARGET="10.15.0.4"
          else
            SSH_TARGET="opensource.mieweb.org"
          fi
          
          sshpass -p 'mie123!' ssh \
            -T \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o SendEnv="PROXMOX_USERNAME PROXMOX_PASSWORD CONTAINER_NAME PROJECT_REPOSITORY" \
            container-exists@$SSH_TARGET
          CONTAINER_EXISTS=$?
          if [ $CONTAINER_EXISTS -eq 1 ]; then
            echo "FAILED=1" >> $GITHUB_ENV # User does not own the container
          elif [ $CONTAINER_EXISTS -eq 0 ]; then
            echo "Cloning repository based on $PROJECT_BRANCH branch."

            sshpass -p 'mie123!' ssh \
              -T \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o SendEnv="CONTAINER_NAME CONTAINER_PASSWORD PROXMOX_USERNAME PUBLIC_KEY PROXMOX_PASSWORD HTTP_PORT DEPLOY_ON_START PROJECT_REPOSITORY PROJECT_BRANCH PROJECT_ROOT REQUIRE_ENV_VARS CONTAINER_ENV_VARS INSTALL_COMMAND START_COMMAND RUNTIME_LANGUAGE REQUIRE_SERVICES SERVICES CUSTOM_SERVICES LINUX_DISTRIBUTION MULTI_COMPONENT ROOT_START_COMMAND GH_ACTION GITHUB_PAT" \
              create-container@$SSH_TARGET 

            CONTAINER_CREATED=$?
            echo "CONTAINER_CREATED=true" >> $GITHUB_OUTPUT
            if [ $CONTAINER_CREATED -ne 0 ]; then
                echo "FAILED=1" >> $GITHUB_ENV
            fi
          fi
        fi

    - name: Container Update on Branch Push
      shell: bash
      if: ${{ (github.event_name == 'push' && steps.create-lxc.outputs.CONTAINER_CREATED != 'true') && steps.should-run.outputs.should_run == 'true' }}
      env:
        GITHUB_EVENT: ${{ github.event_name }}
        GITHUB_REPOSITORY_FULL: ${{ github.repository }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        TARGET_BRANCH: ${{ steps.branch-name.outputs.target_branch }}
        PROXMOX_USERNAME: ${{ inputs.proxmox_username }}
        PROXMOX_PASSWORD: ${{ inputs.proxmox_password }}
        PROJECT_REPOSITORY: ${{ github.server_url }}/${{ github.repository }}
        PROJECT_BRANCH: ${{ steps.branch-name.outputs.target_branch }}
        PROJECT_ROOT: ${{ inputs.project_root }}
        INSTALL_COMMAND: ${{ inputs.install_command }}
        START_COMMAND: ${{ inputs.start_command }}
        BUILD_COMMAND: ${{ inputs.build_command }}
        RUNTIME_LANGUAGE: ${{ inputs.runtime_language }}
        MULTI_COMPONENT: ${{ inputs.multi_component }}
        SERVICES: ${{ inputs.services }}
        CUSTOM_SERVICES: ${{ inputs.custom_services }}
        REQUIRE_SERVICES: ${{ inputs.require_services }}
        LINUX_DISTRIBUTION: ${{ inputs.linux_distribution }}
        DEPLOY_ON_START: ${{ inputs.deploy_on_start }}
        ROOT_START_COMMAND: ${{ inputs.root_start_command }}
        GITHUB_PAT: ${{ inputs.github_pat }}
        HTTP_PORT: ${{ inputs.http_port }}
        GH_ACTION: y
      run: |
        set +e
        echo "Running Container Update..."
        REPO_NAME=$(basename "$GITHUB_REPOSITORY_FULL")
        CONTAINER_NAME="${GITHUB_REPOSITORY_OWNER}-${REPO_NAME}-${TARGET_BRANCH}"
        CONTAINER_NAME=${CONTAINER_NAME,,}
        CONTAINER_NAME=$(echo "$CONTAINER_NAME" | sed 's/[^a-z0-9-]/-/g')
        export CONTAINER_NAME
        echo "$LINUX_DISTRIBUTION"
        STOP_SCRIPT=${{ steps.create-runner.outputs.STOP_SCRIPT }}
        if [ "$STOP_SCRIPT" != true ]; then
          # Determine SSH target based on network location
          EXTERNAL_IP=$(dig +short opensource.mieweb.org)
          if [ "$EXTERNAL_IP" = "10.15.20.69" ]; then
            SSH_TARGET="10.15.0.4"
          else
            SSH_TARGET="opensource.mieweb.org"
          fi
          
          sshpass -p 'mie123!' ssh \
            -T \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o SendEnv="CONTAINER_NAME PROXMOX_USERNAME PROXMOX_PASSWORD PROJECT_REPOSITORY PROJECT_BRANCH PROJECT_ROOT INSTALL_COMMAND START_COMMAND BUILD_COMMAND RUNTIME_LANGUAGE MULTI_COMPONENT ROOT_START_COMMAND DEPLOY_ON_START SERVICES CUSTOM_SERVICES REQUIRE_SERVICES LINUX_DISTRIBUTION GH_ACTION HTTP_PORT" \
            update-container@$SSH_TARGET
          UPDATE_EXIT=$?
          if [ $UPDATE_EXIT -ne 0 ]; then
            echo "FAILED=1" >> $GITHUB_ENV
          fi
        fi

    - name: Container Deletion on Branch Deletion (Check)
      shell: bash
      if: ${{ github.event_name == 'delete' && steps.should-run.outputs.should_run == 'true' }}
      env:
        GITHUB_EVENT: ${{ github.event_name }}
        GITHUB_REPOSITORY_FULL: ${{ github.repository }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        TARGET_BRANCH: ${{ steps.branch-name.outputs.target_branch }}
        PROXMOX_USERNAME: ${{ inputs.proxmox_username }}
        PROXMOX_PASSWORD: ${{ inputs.proxmox_password }}
        PROJECT_REPOSITORY: ${{ github.server_url }}/${{ github.repository }}
        GITHUB_PAT: ${{ inputs.github_pat }}
      run: |
        set +e
        REPO_NAME=$(basename "$GITHUB_REPOSITORY_FULL")
        CONTAINER_NAME="${GITHUB_REPOSITORY_OWNER}-${REPO_NAME}-${TARGET_BRANCH}"
        CONTAINER_NAME=${CONTAINER_NAME,,}
        CONTAINER_NAME=$(echo "$CONTAINER_NAME" | sed 's/[^a-z0-9-]/-/g')
        export CONTAINER_NAME
        STOP_SCRIPT=${{ steps.create-runner.outputs.STOP_SCRIPT }}
        if [ "$STOP_SCRIPT" != true ]; then
          # Determine SSH target based on network location
          EXTERNAL_IP=$(dig +short opensource.mieweb.org)
          if [ "$EXTERNAL_IP" = "10.15.20.69" ]; then
            SSH_TARGET="10.15.0.4"
          else
            SSH_TARGET="opensource.mieweb.org"
          fi
          
          sshpass -p 'mie123!' ssh \
            -T \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            -o SendEnv="PROXMOX_USERNAME PROXMOX_PASSWORD CONTAINER_NAME GITHUB_PAT PROJECT_REPOSITORY" \
            delete-container@$SSH_TARGET
          DELETE_EXIT=$?
          if [ $DELETE_EXIT -ne 0 ]; then
            echo "FAILED=1" >> $GITHUB_ENV
          fi
        fi

    - name: Check if branch is part of a PR and comment
      shell: bash
      id: check-pr
      if: steps.should-run.outputs.should_run == 'true' && steps.create-runner.outputs.CREATE_RUNNER_JOB != 'true' && env.FAILED != '1'
      env:
        GITHUB_TOKEN: ${{ inputs.github_pat }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        TARGET_BRANCH: ${{ steps.branch-name.outputs.target_branch }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        RUN_ID: ${{ github.run_id }}
      run: |
        if [ -z "$GITHUB_TOKEN" ]; then
          echo "pr_number=" >> $GITHUB_OUTPUT
          echo "is_pr=false" >> $GITHUB_OUTPUT
          echo "No GitHub token provided, skipping PR detection"
          exit 0
        fi
        
        # Check if this branch has an open PR
        PR_DATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls?state=open&head=${{ github.repository_owner }}:$TARGET_BRANCH")
        
        PR_NUMBER=$(echo "$PR_DATA" | jq -r '.[0].number // empty')
        
        if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "null" ]; then
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "is_pr=true" >> $GITHUB_OUTPUT
          echo "Branch $TARGET_BRANCH is part of PR #$PR_NUMBER"
          
          # Generate container name
          REPO_NAME=$(basename "$GITHUB_REPOSITORY")
          CONTAINER_NAME="${GITHUB_REPOSITORY_OWNER}-${REPO_NAME}-${TARGET_BRANCH}"
          CONTAINER_NAME=${CONTAINER_NAME,,}
          CONTAINER_NAME=$(echo "$CONTAINER_NAME" | sed 's/[^a-z0-9-]/-/g')
          
          # Create initial comment on PR
          CONTAINER_URL="https://${CONTAINER_NAME}.opensource.mieweb.org"

          COMMENT_BODY="## 🚀 Proxmox LaunchPad Action
          **Expected URL**: [$CONTAINER_NAME]($CONTAINER_URL) *(will be available once deployment completes)*
          **Status**: ✅ Application was deployed according to workflow configurations.
          **Branch**: \`$TARGET_BRANCH\`
          **Run ID**: [\`$RUN_ID\`](https://github.com/$GITHUB_REPOSITORY/actions/runs/$RUN_ID)
          **Container Name**: \`$CONTAINER_NAME\`

          > This comment was automatically generated by Proxmox LaunchPad: The fastest way to deploy your repository code. To use Proxmox in your own repository, see: [Proxmox LaunchPad](https://github.com/marketplace/actions/proxmox-launchpad)."

          # Use jq to safely build the JSON payload from the variable
          JSON_PAYLOAD=$(jq -n --arg body "$COMMENT_BODY" '{body: $body}')

          # Post the initial comment
          curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments" \
            -d "$JSON_PAYLOAD" > /dev/null

          echo "Initial comment posted to PR #$PR_NUMBER"
        else
          echo "pr_number=" >> $GITHUB_OUTPUT
          echo "is_pr=false" >> $GITHUB_OUTPUT
          echo "Branch $TARGET_BRANCH is not part of any open PR"
        fi

    - name: Comment on PR on Failure
      if: env.FAILED == '1'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_pat }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        TARGET_BRANCH: ${{ steps.branch-name.outputs.target_branch }}
        RUN_ID: ${{ github.run_id }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: |
        if [ -z "$GITHUB_TOKEN" ]; then
          echo "Cannot comment on PR: missing token"
          exit 1
        fi

        # Check if this branch has an open PR
        PR_DATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls?state=open&head=${GITHUB_REPOSITORY_OWNER}:$TARGET_BRANCH")
        
        PR_NUMBER=$(echo "$PR_DATA" | jq -r '.[0].number // empty')

        if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" == "null" ]; then
          echo "Not a pull request, skipping failure comment."
          exit 0
        fi

        REPO_NAME=$(basename "$GITHUB_REPOSITORY")
        CONTAINER_NAME="${GITHUB_REPOSITORY_OWNER}-${REPO_NAME}-${TARGET_BRANCH}"
        CONTAINER_NAME=${CONTAINER_NAME,,}
        CONTAINER_NAME=$(echo "$CONTAINER_NAME" | sed 's/[^a-z0-9-]/-/g')

        CONTAINER_URL="https://${CONTAINER_NAME}.opensource.mieweb.org"

        COMMENT_BODY="## 🚀 Proxmox LaunchPad Action
        **Expected URL**: [$CONTAINER_NAME]($CONTAINER_URL) *(will be available once deployment completes)*
        **Status**: ❌ Application failed to deploy. View [\`$RUN_ID\`](https://github.com/$GITHUB_REPOSITORY/actions/runs/$RUN_ID) to see logs.
        **Branch**: \`$TARGET_BRANCH\`
        **Run ID**: [\`$RUN_ID\`](https://github.com/$GITHUB_REPOSITORY/actions/runs/$RUN_ID)
        **Container Name**: \`$CONTAINER_NAME\`

        > This comment was automatically generated by Proxmox LaunchPad: The fastest way to deploy your repository code. To use Proxmox in your own repository, see: [Proxmox LaunchPad](https://github.com/marketplace/actions/proxmox-launchpad)."

        JSON_PAYLOAD=$(jq -n --arg body "$COMMENT_BODY" '{body: $body}')

        # Post the comment
        curl -s -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments" \
          -d "$JSON_PAYLOAD" > /dev/null

        echo "Failure comment posted to PR #$PR_NUMBER"
        exit 1

    - name: Create GitHub Deployment (Default Branch)
      if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch) && env.FAILED != '1'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_pat }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: |
        REPO_NAME=$(basename "$GITHUB_REPOSITORY")
        CONTAINER_NAME="${GITHUB_REPOSITORY_OWNER}-${REPO_NAME}-${GITHUB_REF#refs/heads/}"
        CONTAINER_NAME=${CONTAINER_NAME,,}
        CONTAINER_NAME=$(echo "$CONTAINER_NAME" | sed 's/[^a-z0-9-]/-/g')
        CONTAINER_URL="https://${CONTAINER_NAME}.opensource.mieweb.org"
        DEPLOYMENT_RESPONSE=$(curl -s -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/$GITHUB_REPOSITORY/deployments" \
          -d '{
            "ref": "'${GITHUB_REF#refs/heads/}'",
            "required_contexts": [],
            "environment": "Preview - '$GITHUB_REPOSITORY'",
            "description": "Deployment triggered from Proxmox LaunchPad action.",
            "sha": "'$GITHUB_SHA'"
          }')
        DEPLOYMENT_ID=$(echo "$DEPLOYMENT_RESPONSE" | jq -r '.id')
        if [ "$DEPLOYMENT_ID" != "null" ] && [ -n "$DEPLOYMENT_ID" ]; then
          curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/deployments/$DEPLOYMENT_ID/statuses" \
            -d '{
              "state": "success",
              "description": "Deployment completed successfully.",
              "environment": "Preview - '$GITHUB_REPOSITORY'",
              "environment_url": "'$CONTAINER_URL'"
            }' > /dev/null
          echo "Deployment created and marked as successful for default branch: ${GITHUB_REF#refs/heads/}"
          echo "Deployment URL: $CONTAINER_URL"
        else
          echo "Deployment creation failed."
        fi

    - name: Catch All Failure Step
      if: env.FAILED == '1'
      shell: bash
      run: |
        echo "Workflow failed. See previous steps for details."
        exit 1
